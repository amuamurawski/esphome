esphome:
  name: "esphome-amu-dev"
  friendly_name: esp32-amu-dev
  min_version: 2025.5.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret printAirPipe_servoValve_api_key

ota:
  platform: esphome
  password: !secret printAirPipe_servoValve_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  ap:
    ssid: "ESP32-AMU-AP"
    password: !secret printAirPipe_servoValve_ap_password

captive_portal:

interval:
  - interval: 1s
    then:
      - lambda: |-
          float value = id(valve_position_direct_control_number).state;
          float r = 1.0 - (value / 100.0);
          float g = value / 100.0;
          id(status_led).turn_on().set_brightness(1.0).set_rgb(r, g, 0.0).perform();

esp32_touch:
  setup_mode: False

time:
  - platform: homeassistant
    id: homeassistant_time
    
text_sensor:
  - platform: version
    name: "ESPHome Version"

  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results

output:
  - platform: ledc
    id: valve_servo_pwm_output
    pin: GPIO13
    frequency: 50 Hz

servo:
  - id: valve_servo
    output: valve_servo_pwm_output

web_server:
  port: 80


sensor:
- platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
  name: "WiFi Signal dB"
  id: wifi_signal_db
  update_interval: 60s
  entity_category: "diagnostic"
- platform: copy # Reports the WiFi signal strength in %
  source_id: wifi_signal_db
  name: "WiFi Signal Percent"
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "Signal %"
  entity_category: "diagnostic"
- platform: uptime
  name: Uptime
- platform: internal_temperature
  name: "Internal Temperature"
- platform: dht
  pin: 26
  model: DHT11 
  temperature:
    name: "Room Temperature"
  humidity:
    name: "Room Humidity"
  update_interval: 60s
- platform: adc
  pin: 32
  name: "Skylight Illuminance"
  update_interval: 5s
  unit_of_measurement: lx
  attenuation: 11db
  filters:
    - lambda: |-
        return (x / 10000.0) * 2000000.0;


number:
  - platform: template
    name: Valve servo direct control    
    id: valve_position_direct_control_number
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - lambda: |-
            float min_percent = 0;
            float max_percent = 100;
            float adjusted_percent = (x / 100.0) * (max_percent - min_percent) + min_percent;
            float servo_level = adjusted_percent / 100.0;
            id(valve_servo).write(servo_level);

            // LED RGB w zależności od pozycji
            float r = 1.0 - (x / 100.0);
            float g = x / 100.0;
            id(status_led).turn_on().set_brightness(1.0).set_rgb(r, g, 0.0).perform();

  - platform: template
    name: Valve Open position
    id: valve_opened_position
    min_value: 0
    initial_value: 100
    max_value: 100
    step: 1
    optimistic: true
    mode: box

  - platform: template
    name: Valve Closed position
    id: valve_closed_position
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    mode: box

# button:
#   - platform: template
#     name: Close valve
#     id: close_valve_button
#     on_press:
#       then:
#         - servo.write:
#             id: valve_servo
#             level: !lambda 'return id(valve_closed_position).state;'
#         - number.set:
#             id: valve_position_direct_control_number
#             value: !lambda 'return id(valve_closed_position).state;'

#   - platform: template
#     name: Open valve
#     id: open_valve_button
#     on_press:
#       then:
#         - servo.write:
#             id: valve_servo
#             level: !lambda 'return id(valve_opened_position).state;'
#         - number.set:
#             id: valve_position_direct_control_number
#             value: !lambda 'return id(valve_opened_position).state;'

cover:
  - platform: template
    name: "Przysłona wentylacji"
    icon: mdi:air-purifier
    id: valve_cover
    device_class: damper
    optimistic: true
    open_action:
      - lambda: |-
          float level = id(valve_opened_position).state / 100.0;
          id(valve_servo).write(level);
          id(valve_position_direct_control_number).publish_state(id(valve_opened_position).state);
    close_action:
      - lambda: |-
          float level = id(valve_closed_position).state / 100.0;
          id(valve_servo).write(level);
          id(valve_position_direct_control_number).publish_state(id(valve_closed_position).state);
    stop_action:
      - lambda: |-
          // nic nie robimy – zawór nie ma zatrzymania
    has_position: false

binary_sensor:
  - platform: gpio
    pin: GPIO35
    name: "PIR Sensor"
    device_class: motion
    filters:
      - delayed_off: 2.1s

  - platform: esp32_touch
    name: "Touch sensor"
    pin: GPIO33
    threshold: 400
    on_press:
      then:
        - lambda: |-
            if (id(valve_position_direct_control_number).state >= 50) {
              id(valve_cover).make_call().set_command_close().perform();
            } else {
              id(valve_cover).make_call().set_command_open().perform();
            }

  # - platform: esp32_touch
  #   name: "Touch sensor"
  #   pin: GPIO33
  #   threshold: 400
  #   on_press:
  #     then:
  #       - lambda: |-
  #          if (id(valve_position_direct_control_number).state >= 50)
  #          {
  #           id(close_valve_button).press(); 
  #          } else 
  #          {
  #           id(open_valve_button).press();
  #          }

light:
  - platform: neopixelbus
    restore_mode: ALWAYS_OFF
    id: status_led
    type: GRB
    variant: WS2812
    pin: GPIO16
    num_leds: 1
    internal: true